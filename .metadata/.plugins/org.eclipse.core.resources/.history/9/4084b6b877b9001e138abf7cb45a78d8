package com.meusprojetos.controle_financas.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.meusprojetos.controle_financas.dto.LancamentoDTO;
import com.meusprojetos.controle_financas.dto.UserDTO;
import com.meusprojetos.controle_financas.entities.Lancamento;
import com.meusprojetos.controle_financas.repositories.LancamentoRepository;
import com.meusprojetos.controle_financas.services.exceptions.ResourceNotFoundException;

import jakarta.validation.Valid;

@Service
public class LancamentoService  {

	@Autowired
	private LancamentoRepository repository;
	
	@Autowired
	private UserService userService;

	
	@Transactional(readOnly = true)
	public Page<LancamentoDTO> findAll(String descricao, Pageable pageable) {
		Page<Lancamento> result = repository.searchByDescricao(descricao, pageable);
		return result.map(x -> new LancamentoDTO(x));
	}
	
	@Transactional(readOnly = true)
	public Page<LancamentoDTO> findAllByUser(String descricao, Pageable pageable) {
		UserDTO userDTO = userService.getMe();
		Page<Lancamento> result = repository.searchByUser(descricao, pageable, userDTO.getId());
		return result.map(x -> new LancamentoDTO(x));
	}

	@Transactional(readOnly = true)
	public LancamentoDTO findById(Long id) {
		Lancamento lancamento = repository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Recurso n√£o encontrado"));
		LancamentoDTO dto = new LancamentoDTO(lancamento);
		return dto;

	}

	public @Valid LancamentoDTO update(Long id, @Valid LancamentoDTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	public void delete(Long id) {
		// TODO Auto-generated method stub
		
	}

	@Transactional
	public LancamentoDTO insert(LancamentoDTO dto) {
		Lancamento Lancamento = new Lancamento();
		copyDTOToEntity(dto, Lancamento);
		return new LancamentoDTO(repository.save(Lancamento));
	}

	private void copyDTOToEntity(LancamentoDTO dto, Lancamento lancamento) {
		
		
	}

	
	

	

}