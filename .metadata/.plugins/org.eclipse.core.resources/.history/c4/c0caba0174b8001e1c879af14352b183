package com.meusprojetos.controle_financas.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.meusprojetos.controle_financas.dto.UserDto;
import com.meusprojetos.controle_financas.entities.Role;
import com.meusprojetos.controle_financas.entities.User;
import com.meusprojetos.controle_financas.projections.UserDetailsProjection;
import com.meusprojetos.controle_financas.repositories.UserRepository;

@Service
public class UserService implements UserDetailsService {

	@Autowired
	UserRepository repository;

	PasswordEncoder passwordEncoder;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

		List<UserDetailsProjection> result = repository.searchUserAndRolesByEmail(username);
		if (result.size() == 0) {
			throw new UsernameNotFoundException("Email not found");
		}

		User user = new User();
		user.setEmail(result.get(0).getUsername());
		user.setPassword(result.get(0).getPassword());
		for (UserDetailsProjection projection : result) {
			user.addRole(new Role(projection.getRoleId(), projection.getAuthority()));
		}

		return user;
	}

	protected User findUserAutent() {

		try {

			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			Jwt jwtPrincipal = (Jwt) authentication.getPrincipal();
			String username = jwtPrincipal.getClaimAsString("username");

			return repository.findByEmail(username).get();

		} catch (Exception e) {
			throw new UsernameNotFoundException("Email not found");
		}

	}

	@Transactional(readOnly = true)
	public UserDto getMe() {
		User user = findUserAutent();
		return new UserDto(user);
	}

	@Transactional
	public UserDto insert(UserDto dto) {
			User user = new User();
			copyDtoTOEntity(dto, user);
			
			return new UserDto(repository.save(user));
	
	}

	private void copyDtoTOEntity(UserDto dto, User user) {
		user.setName(dto.getName());
		user.setEmail(dto.getEmail());
		user.setPassword(dto.getPassword());

	}
}